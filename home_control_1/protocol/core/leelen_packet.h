/********************************************************************************
**
** 文件名:     leelen_packet.h
** 版权所有:   (c) 2015 厦门立林科技有限公司
** 文件描述:   实现通讯协议数据包分配管理模块
**
*********************************************************************************
**             修改历史记录
**===============================================================================
**| 日期       | 作者   |  修改记录
**===============================================================================
**| 2015/09/28 | zzh    |  创建该文件
**
*********************************************************************************/


#ifndef LEELEN_PLEE_ACKET_H
#define LEELEN_PLEE_ACKET_H

#ifdef __cplusplus
extern "C" {
#endif

/*
********************************************************************************
* 定义同步头标识
********************************************************************************
*/

#define SYNC_HEAD0  0xd1
#define SYNC_HEAD1  0xd2
#define SYNC_HEAD2  0xd5

/*
********************************************************************************
* 定义PLEE_ACKET
********************************************************************************
*/
typedef struct {
    uint8_t   sync_head[3];       /* 同步头数据 */
    uint16_t  prot_ver;           /* 协议版本号 */
    uint16_t  cmd_type;           /* 命令字 */
    uint32_t  session_id;         /* 会话ID */
    uint8_t   req_ack;            /* 请求/应答 */
    uint8_t   encrypt;            /* 加密 */
    uint32_t  pkt_length;         /* 包体数据长度 */
    uint8_t   src[5];             /* 源地址 */
    uint8_t   dest[5];            /* 目的地址 */
    uint8_t   *prot_body;         /* 原始数据缓冲区大小 */
    uint16_t  body_len;           /* 协议数据大小 */
    uint16_t  reserved;
    uint32_t  dest_ip;
    uint32_t  dest_port;
    uint8_t   check_sum;          /* 校验字 */
} packet_t;

/*******************************************************************
** 函数名:     packet_head_length
** 函数描述:   获取包头长度(包括累加和预留字节 3个字节)
** 参数:       [in]  pkt:       数据包
** 返回:       包头数据长度
********************************************************************/
uint8_t packet_head_length(packet_t *pkt);

/*******************************************************************
** 函数名:     packet_assemble
** 函数描述:   根据协议进行组帧
** 参数:       [in]  pkt:       数据包
**             [in]  cmd:       协议命令字
**             [in]  sid:       会话id
** 返回:       无
********************************************************************/
void packet_assemble(packet_t *pkt, uint16_t cmd, uint32_t sid);

/*******************************************************************
** 函数名:     packet_alloc
** 函数描述:   请求分配一个数据包
** 参数:       [in]  len:       请求分配数据包的大小
** 返回:       分配到的数据包; 如分配失败, 则返回0
********************************************************************/
packet_t *packet_alloc(int len);

/*******************************************************************
** 函数名:     packet_free
** 函数描述:   释放分配到的数据包
** 参数:       [in]  pkt:       待释放的数据包
** 返回:       释放成功或失败
********************************************************************/
void packet_free(packet_t *pkt);


#ifdef __cplusplus
}
#endif


#endif          /* end of LEELEN_PLEE_ACKET_H */

