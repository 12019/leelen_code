/********************************************************************************
**
** 文件名:     leelen_list.h
** 版权所有:   (c) 2015 厦门立林科技有限公司
** 文件描述:   实现队列链表功能
**
*********************************************************************************
**             修改历史记录
**===============================================================================
**| 日期       | 作者   |  修改记录
**===============================================================================
**| 2015/09/28 | zzh    |  创建该文件
**
*********************************************************************************/

#ifndef LEELEN_LIST_H
#define LEELEN_LIST_H


#ifdef __cplusplus
extern "C"
{
#endif


/*
********************************************************************************
* 定义lee_node和 lee_list
********************************************************************************
*/
typedef struct lee_node {
    struct lee_node *prv;
    struct lee_node *next;
} lee_node_t;

typedef struct {
    int    item;
    lee_node_t *head;
    lee_node_t *tail;
} lee_list_t;


/*******************************************************************
** 函数名:     check_list
** 函数描述:   检测链表的有效性
** 参数:       [in]  lp:        链表
** 返回:       TRUE:    链表有效
**             FALSE:   链表无效
********************************************************************/
bool_t check_list(lee_list_t *lp);

/*******************************************************************
** 函数名:     init_list
** 函数描述:   初始化链表
** 参数:       [in]  lp:        链表
** 返回:       TRUE:    成功
**             FALSE:   失败
********************************************************************/
bool_t init_list(lee_list_t *lp);

/*******************************************************************
** 函数名:     get_list_item
** 函数描述:   获取链表节点个数
** 参数:       [in]  lp:        链表
** 返回:       链表节点个数
********************************************************************/
int get_list_item(lee_list_t *lp);

/*******************************************************************
** 函数名:     get_list_head
** 函数描述:   获取链表头节点
** 参数:       [in]  lp:        链表
** 返回:       链表头节点; 如链表无节点, 则返回0
********************************************************************/
void * get_list_head(lee_list_t *lp);

/*******************************************************************
** 函数名:     get_list_tail
** 函数描述:   获取链表尾节点
** 参数:       [in]  lp:        链表
** 返回:       链表尾节点; 如链表无节点, 则返回0
********************************************************************/
void * get_list_tail(lee_list_t *lp);

/*******************************************************************
** 函数名:     get_list_ele
** 函数描述:   获取第n个节点
** 参数:       [in]  lp:        链表
**             [in]  n:        待获取节点的序号, 注意: 序号从0开始编号, 0表示链表头节点
** 返回:       第n节点; 如返回0, 则表示第n个节点不存在
********************************************************************/
void * get_list_ele(lee_list_t *lp, int n);

/*******************************************************************
** 函数名:     get_list_next_ele
** 函数描述:   获取指定节点的下个节点
** 参数:       [in]  bp:        指定节点
** 返回:       返回指定节点bp的下个节点; 如返回0, 则表示不存在下一节点
********************************************************************/
void * get_list_next_ele(void *bp);

/*******************************************************************
** 函数名:     get_list_prv_ele
** 函数描述:   获取指定节点的前一节点
** 参数:       [in]  bp:        指定节点
** 返回:       返回指定节点bp的前一节点; 如返回0, 则表示不存在前一节点
********************************************************************/
void * get_list_prv_ele(void *bp);

/*******************************************************************
** 函数名:     del_list_ele
** 函数描述:   删除指定节点
** 参数:       [in]  lp:        链表
**             [in]  bp:        指定节点
** 返回:       返回指定节点bp的下个节点; 如返回0, 则表示bp不存在下一节点
********************************************************************/
void * del_list_ele(lee_list_t *lp, void *bp);

/*******************************************************************
** 函数名:     del_list_head
** 函数描述:   删除链表头节点
** 参数:       [in]  lp:        链表
** 返回:       链表头节点; 如返回0, 则表示不存在链表头节点
********************************************************************/
void * del_list_head(lee_list_t *lp);

/*******************************************************************
** 函数名:     del_list_tail
** 函数描述:   删除链表尾节点
** 参数:       [in]  lp:        链表
** 返回:       链表尾节点; 如返回0, 则表示不存在链表尾节点
********************************************************************/
void * del_list_tail(lee_list_t *lp);

/*******************************************************************
** 函数名:     append_list_ele
** 函数描述:   在链表尾上追加一个节点
** 参数:       [in]  lp:        链表
**             [in]  bp:        待追加节点
** 返回:       追加成功或失败
********************************************************************/
bool_t append_list_ele(lee_list_t *lp, void *bp);

/*******************************************************************
** 函数名:     insert_list_ele
** 函数描述:   在链表头插入一个节点
** 参数:       [in]  lp:        链表
**             [in]  bp:        待插入的节点
** 返回:       插入成功或失败
********************************************************************/
bool_t insert_list_ele(lee_list_t *lp, void *bp);

/*******************************************************************
** 函数名:     init_mem_list
** 函数描述:   将一块内存初始化成链表缓冲区
** 参数:       [in]  memlp:     链表
**             [in]  addr:      内存起始地址
**             [in]  nblks:     内存块个数
**             [in]  blksize:   内存块大小
** 返回:       成功或失败
********************************************************************/
bool_t init_mem_list(lee_list_t *memlp, void *addr, int nblks, int blksize);

#ifdef __cplusplus
}
#endif



#endif  /* end of LEELEN_LIST_H */

