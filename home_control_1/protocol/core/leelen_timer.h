/********************************************************************************
**
** 文件名:     leelen_timer.h
** 版权所有:   (c) 2015 厦门立林科技有限公司
** 文件描述:   实现定时器功能
**
*********************************************************************************
**             修改历史记录
**===============================================================================
**| 日期       | 作者   |  修改记录
**===============================================================================
**| 2015/09/28 | zzh    |  创建该文件
**
*********************************************************************************/

#ifndef LEELEN_TIMER_H
#define LEELEN_TIMER_H

#ifdef __cplusplus
extern "C"
{
#endif

typedef void    (* timer_cb)(void);

/*******************************************************************
** 函数名:     timer_handler
** 函数描述:   定时器处理函数
** 参数:       无
** 返回:       无
********************************************************************/
void timer_handler(void);

/*******************************************************************
** 函数名:     install_timer
** 函数描述:   安装一个定时器
** 参数:       [in]  p_fn:      定时器超时处理函数
** 返回:       定时器id; 如安装失败, 则返回0xff
** 注意:       安装完定时器还需调用start_timer才能启动定时器运行
********************************************************************/
uint8_t install_timer(timer_cb p_fn);

/*******************************************************************
** 函数名:     remove_timer
** 函数描述:   删除一个已创建的定时器
** 参数:       [in]  id:        已创建的一个定时器id
** 返回:       无
********************************************************************/
void remove_timer(uint8_t id);

/*******************************************************************
** 函数名:     start_timer
** 函数描述:   启动定时器
** 参数:       [in]  id:        已创建的一个定时器id
**             [in]  overtime:  定时器超时时间, 单位: ms(注意: 不是tick数)
**             [in]  is_period: TRUE:  重复定时器
**                              FALSE: 单次定时器
** 返回:       无
********************************************************************/
void start_timer(uint8_t id, uint32_t overtime, uint8_t is_period);

/*******************************************************************
** 函数名:     stop_timer
** 函数描述:   停止定时器
** 参数:       [in]  id:        已创建的一个定时器id
** 返回:       无
********************************************************************/
void stop_timer(uint8_t id);

/*******************************************************************
** 函数名:     left_timer
** 函数描述:   获取定时器剩余的运行时间
** 参数:       [in]  id:        已创建的一个定时器id
** 返回:       剩余的运行时间, 单位: ms
********************************************************************/
uint32_t left_timer(uint8_t id);

/*******************************************************************
** 函数名:     timer_is_run
** 函数描述:   判断定时器是否处于运行状态
** 参数:       [in]  id:        已创建的一个定时器id
** 返回:       TRUE:  定时器处于运行状态
**             FALSE: 定时器处于停止状态
********************************************************************/
uint8_t timer_is_run(uint8_t id);

/*******************************************************************
** 函数名:     init_timer
** 函数描述:   模块初始化函数
** 参数:       无
** 返回:       无
********************************************************************/
void init_timer(void);

#ifdef __cplusplus
}
#endif


#endif          /* end of LEELEN_TIMER_H */


